from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from db.mysql import find_films_by_title, search_film_availability_by_id
from db.mongo import log_search

AVAILABILITY_INPUT = 40
AVAILABILITY_SELECT_FILM = 41
MAIN_MENU = 0

async def availability_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    buttons = [[InlineKeyboardButton("üîö –í—ã–π—Ç–∏", callback_data="exit")]]
    await update.callback_query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return AVAILABILITY_INPUT

async def availability_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    title = update.message.text.strip()
    if not title or len(title) < 2:
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")
        return AVAILABILITY_INPUT

    films = find_films_by_title(title)

    if not films:
        await update.message.reply_text("üîç –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return AVAILABILITY_INPUT

    context.user_data["availability_title"] = title

    if len(films) == 1:
        film = films[0]
        return await show_availability(update, context, film["film_id"], film["title"])

    buttons = [
        [InlineKeyboardButton(f"üé¨ {film['title']}", callback_data=f"selectfilm_{film['film_id']}")]
        for film in films
    ]
    buttons.append([InlineKeyboardButton("üîö –í—ã–π—Ç–∏", callback_data="exit")])
    await update.message.reply_text(
        "üîé –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return AVAILABILITY_SELECT_FILM

async def availability_select_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    data = update.callback_query.data

    if not data.startswith("selectfilm_"):
        await update.callback_query.edit_message_text("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞.")
        return MAIN_MENU

    film_id = int(data.replace("selectfilm_", ""))
    user_input = context.user_data.get("availability_title", "")
    films = find_films_by_title(user_input)
    film = next((f for f in films if f["film_id"] == film_id), None)
    title = film["title"] if film else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    return await show_availability(update, context, film_id, title)

async def show_availability(update: Update, context: ContextTypes.DEFAULT_TYPE, film_id: int, title: str):
    stores = search_film_availability_by_id(film_id)

    if not stores:
        message = f"üîç –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è ¬´{title}¬ª."
    else:
        message = f"üì¶ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è ¬´{title}¬ª:\n\n"
        for s in stores:
            message += (
                f"üè¨ –ú–∞–≥–∞–∑–∏–Ω #{s['store_id']}\n"
                f"üìç {s['address']}, {s['district']}, {s['city']}, {s['country']}\n"
                f"üìû {s['phone']}\n"
                f"üéûÔ∏è –ö–æ–ª-–≤–æ –∫–æ–ø–∏–π: {s['count']}\n\n"
            )

    buttons = [[InlineKeyboardButton("üîö –í—ã–π—Ç–∏", callback_data="exit")]]

    if update.message:
        await update.message.reply_text(message, reply_markup=InlineKeyboardMarkup(buttons))
    elif update.callback_query and update.callback_query.message:
        await update.callback_query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(buttons))

    log_search("availability", {
        "title": title,
        "film_id": film_id,
        "user_id": update.effective_user.id,
        "stores": stores
    }, len(stores))

    return MAIN_MENU

# üîÅ –ü–æ–≤—Ç–æ—Ä –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
async def repeat_availability(update: Update, context: ContextTypes.DEFAULT_TYPE, data: dict):
    title = data.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    stores = data.get("stores", [])

    if not stores:
        message = f"üîç –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è ¬´{title}¬ª."
    else:
        message = f"üîÅ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è ¬´{title}¬ª:\n\n"
        for s in stores:
            message += (
                f"üè¨ –ú–∞–≥–∞–∑–∏–Ω #{s['store_id']}\n"
                f"üìç {s['address']}, {s['district']}, {s['city']}, {s['country']}\n"
                f"üìû {s['phone']}\n"
                f"üéûÔ∏è –ö–æ–ª-–≤–æ –∫–æ–ø–∏–π: {s['count']}\n\n"
            )

    buttons = [[InlineKeyboardButton("üîö –í—ã–π—Ç–∏", callback_data="exit")]]

    await update.callback_query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(buttons))
    return MAIN_MENU
